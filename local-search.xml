<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker&amp;部署</title>
    <link href="/2019/12/30/vim%E7%AE%80%E5%8D%95%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2019/12/30/vim%E7%AE%80%E5%8D%95%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="vim简单编辑器"><a href="#vim简单编辑器" class="headerlink" title="vim简单编辑器"></a>vim简单编辑器</h2><pre><code class="python">1.使用vim命令进入vim界面编辑:    vim 文件名字2.按Esc进入普通模式:    h:左  l:右  j:下  k:上  w:移动到下一个单词  b:移动到上一个单词    i:在当前光标处进行编辑      I:在行首插入    A:在行末插入    a:在光标后插入编辑    o:在当前行后插入一个新行    O:在当前行前插入一个新行    cw:替换从光标所在位置后到一个单词结尾的字符3.保存并退出：wq    :w 文件名：可以将文档另存为    :q! 强制退出，不保存    :q 退出    :wq! 强制保存并退出    :saveas 文件路径 :另存为    :x  保存并退出    :wq  保存并退出4.普通模式下删除文本信息:    x     删除游标所在的字符    X   删除游标所在前一个字符    Delete  同x    dd  删除整行    dw  删除一个单词(不适用中文)    d$或D  删除至行尾    d^   删除至行首    dG  删除到文档结尾处    d1G 删至文档首部    还可以在命令之前加数字表示一次删除多行    例如：2dd</code></pre><h2 id="vim文档编辑"><a href="#vim文档编辑" class="headerlink" title="vim文档编辑"></a>vim文档编辑</h2><pre><code class="python">1.普通模式下.(小数点)表示重复上一次命令操作:    普通模式下输入x，删除第一个字符，输入.(小数点)会再次删除一个字符，除此之外也可以重复dd的删除操作2.指定相同的命令:    N&lt;command&gt;     N表示重复后面的次数    10x 删除10个连续字符    3dd 删除3行文本3.行间跳转:    nG(n shift+g)  游标移动到第 n 行(如果默认没有显示行号，请先进入命令模式，输入:set nu以显示行号)    gg     游标移动到到第一行    G(Shift+g)     到最后一行4.行内跳转:    w    到下一个单词的开头    e    到当前单词的结尾    b    到前一个单词的开头    ge    到前一个单词的结尾    0或^    到行头    $    到行尾    f&lt;字母&gt;    向后搜索&lt;字母&gt;并跳转到第一个匹配的位置(非常实用)    F&lt;字母&gt;    向前搜索&lt;字母&gt;并跳转到第一个匹配的位置    t&lt;字母&gt;    向后搜索&lt;字母&gt;并跳转到第一个匹配位置之前的一个字母(不常用)    T&lt;字母&gt;    向前搜索&lt;字母&gt;并跳转到第一个匹配位置之后的一个字母(不常用)5.复制粘贴和剪切:普通模式    y    复制    yy    复制游标所在的整行（3yy表示复制3行）    y^    复制至行首，或y0。不含光标所在处字符。    y$    复制至行尾。含光标所在处字符    yw    复制一个单词    y2w    复制两个单词    yG    复制至文本末    y1G    复制至文本开头普通模式粘贴：    p    粘贴    p(小写)    代表粘贴至光标后（下）    P(大写)    代表粘贴至光标前（上）剪贴及粘贴    dd删除命令就是剪切 每次dd删除文档后可以使用p来粘贴</code></pre><h2 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h2><pre><code class="python">1.替换和撤销:普通模式    r+&lt;待替换字母&gt;    将游标所在字母替换为指定字母    R    连续替换 直到按下Esc    cc    替换整行，即删除游标所在行，并进入插入模式    cw    替换一个单词，即删除一个单词，并进入插入模式    C(大写)    替换游标以后至行末    ~    反转游标所在字母大小写    u{n}    撤销一次或n次操作    U(大写)    撤销当前行的所有修改    Ctrl+r    redo,即撤销undo的操作输入fa 跳转到第一个a字符输入r，并且输入b，a字符被b字符替换（实用）输入R替换字符，输入新字符串，输入完按ESC回到普通模式（实用）输入cc替换整行字符，输入新字符串，输入完按ESC回到普通模式输入cw 替换一个英文字(word)，输入完按ESC回到普通模式（实用）输入~，翻转游标所在字符的大小写输入C 替换至行尾，即游标所在处以后的字都会被替换，输入完按ESC回到普通模式输入u 撤销上一次的操作输入2G，跳转到 2 行2.使用命令进行快速调整缩进操作:普通模式下    普通模式下输入15G，跳转到15行    普通模式下输入&gt;&gt; 整行将向右缩进（使用，用于格式化代码超爽）    普通模式下输入&lt;&lt; 整行向左回退    普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数    shiftwidth命令：    shiftwidth命令是指上一节&gt;&gt;命令产生的缩进（可以简写成sw） 普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数 获取目前的设定值 例如:set shiftwidth=103.调整文本位置    :ce(center)    本行内容居中    :ri(right)    本行文本靠右    :le(left)    本行内容靠左4.快速查找:普通模式    普通模式下输入 / 然后键入需要查找的字符串 按回车后就会进行查找。 ？ 与/ 功能相同，只不过 ？ 是向上而 / 是向下查找。 进入查找之后，输入n 和 N 可以继续查找。 n是查找下一个内容,N查找上一个内容。    普通模式下输入/icmp然后回车即可查找字符串 icmp    普通模式下输入n查找下一个 icmp    普通模式下输入？tcp向上查找字符串 tcp    普通模式下输入N查找上一个出现的 tcp    命令行模式下输入 noh 然后回车即可取消搜索高级查找    普通模式下输入\*寻找游标所在处的单词    普通模式下输入\#同上，但 \# 是向前（上）找，\*则是向后（下）找    普通模式下输入g\*同\* ，但部分符合该单词即可    普通模式下输入g\#同\# ，但部分符合该单词即可5.多文件编辑vim 1.txt 2.txt:    默认进入1.txt文件的编辑界面    命令行模式下输入 :n 编辑 2.txt 文件，可以加 ! 即 :n! 强制切换，之前一个文件的输入没有保存，仅仅切换到另一个文件命令行模式下输入 :N 编辑 1.txt 文件，可以加 ! 即 :N! 强制切换，之前文件内的输入没有保存，仅仅是切换到另一个文件进入vim后打开新文件:    命令行模式下输入:e 3.txt 打开新文件3.txt    命令行模式下输入:e# 回到前一个文件    命令行模式下输入:ls可以列出以前编辑过的文档    命令行模式下输入:b 2.txt（或者编号）可以直接进入文件2.txt编辑    命令行模式下输入:bd 2.txt（或者编号）可以删除以前编辑过的列表中的文件项目    命令行模式下输入:e! 4.txt，新打开文件4.txt，放弃正在编辑的文件    命令行模式下输入:f 显示正在编辑的文件名    命令行模式下输入:f new.txt，改变正在编辑的文件名字为new.txt恢复文件:    如果因为断电等原因造成文档没有保存，可以采用恢复方式，vim -r进入文档后，输入:ewcover 1.txt来恢复6.可视模式:普通模式    在普通模式下输入 v（小写），进入字符选择模式，就可以移动光标，光标走过的地方就会选取。再次按下v后就会取消选取。    在普通模式下输入 Shift+v（小写），进入行选择模式，按下V之后就会把整行选取，您可以上下移动光标选更多的行，同样，再按一次 Shift+v 就可以取消选取。    在普通模式下输入 Ctrl+v（小写），这是区域选择模式，可以进行矩形区域选择，再按一次 Ctrl+v 取消选取。    在可视模式下输入 d 删除选取区域内容    在可视模式下输入y复制选取区域内容    在普通模式下9G跳转到第9行,输入Shift+v（小写V），进入可视模式进行行选择，选中5行，按下&gt;&gt;缩进，将5行整体缩进一个shiftwidth    在普通模式下输入 Ctrl+v（小写V），进入可视模式进行矩形区域选择，选中第一列字符然后x删除整列7. 视窗操作简介:    命令行模式下输入:sp 1.txt 打开新的水平分屏视窗来编辑1.txt    命令行模式下输入:vsp 2.txt 打开新的垂直分屏视窗来编辑2.txt    普通模式下Ctrl+w s 将当前窗口分割成两个水平的窗口    普通模式下Ctrl+w v 将当前窗口分割成两个垂直的窗口    普通模式下Ctrl+w q 即 :q 结束分割出来的视窗。如果在新视窗中有输入需要使用强制符！即:q!    普通模式下Ctrl+w o 打开一个视窗并且隐藏之前的所有视窗    普通模式下Ctrl+w j 移至下面视窗    普通模式下Ctrl+w k 移至上面视窗    普通模式下Ctrl+w h 移至左边视窗    普通模式下Ctrl+w l 移至右边视窗    普通模式下Ctrl+w J 将当前视窗移至下面    普通模式下Ctrl+w K 将当前视窗移至上面    普通模式下Ctrl+w H 将当前视窗移至左边    普通模式下Ctrl+w L 将当前视窗移至右边    普通模式下Ctrl+w - 减小视窗的高度    普通模式下Ctrl+w + 增加视窗的高度8.创建加密文档:    $ vim -x file19.在vim执行外部命令:    :!ls 用于显示当前目录的内容    :!rm FILENAME用于删除名为 FILENAME 的文件    :w FILENAME可将当前 VIM 中正在编辑的文件另存为 FILENAME 文件10.帮助系统:    普通模式下按F1打开vim自己预设的帮助文档    命令行模式下输入:h shiftwidth 打开名为shiftwidth的帮助文件    命令行模式下输入:ver 显示版本及参数11.功能设定:    1. vim的功能设定可以在编辑文件的时候进行功能设定，如命令行模式下输入:set nu（显示行数），设定值退出vim后不会保存。要永久保存配置需要修改vim配置文件。 vim的配置文件~/.vimrc(实验楼环境中配置文件在/etc/vim/vimrc)，可以打开文件进行修改，不过务必小心不要影响vim正常使用    2. 获取目前的设定    命令行模式下输入:set或者:se显示所有修改过的配置    命令行模式下输入:set all 显示所有的设定值    命令行模式下输入:set option? 显示option的设定值    命令行模式下输入:set nooption 取消当前设定值    2.7.3 set功能的说明    命令行模式下输入:set autoindent(ai) 设置自动缩进    命令行模式下输入:set autowrite(aw) 设置自动存档，默认未打开    命令行模式下输入:set background=dark或light，设置背景风格    命令行模式下输入:set backup(bk) 设置自动备份，默认未打开    命令行模式下输入: set cindent(cin) 设置C语言风格缩进</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker&amp;部署</title>
    <link href="/2019/12/30/Docker-%E9%83%A8%E7%BD%B2/"/>
    <url>/2019/12/30/Docker-%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-engine---community" target="_blank" rel="noopener">官方文档</a></p><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><ol><li>安装所需的软件包。yum-utils提供了yum-config-manager 效用，并device-mapper-persistent-data和lvm2由需要 devicemapper存储驱动程序。<pre><code>$ sudo yum install -y yum-utils \device-mapper-persistent-data \lvm2</code></pre></li><li>使用以下命令来设置稳定的存储库</li></ol><pre><code>$ sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><ol start="3"><li>安装最新版本的Docker Engine-Community和containerd，或者转到下一步安装特定版本</li></ol><pre><code>$ sudo yum install docker-ce docker-ce-cli containerd.io</code></pre><ol start="4"><li>启动docker</li></ol><pre><code>$ sudo systemctl start docker</code></pre><ol start="5"><li>通过运行hello-world 映像来验证是否正确安装了Docker Engine-Community 。</li></ol><pre><code>$ sudo docker run hello-world</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/12/30/hello-world/"/>
    <url>/2019/12/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
